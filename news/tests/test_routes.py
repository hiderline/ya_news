from http import HTTPStatus

from django.contrib.auth import get_user_model
from django.test import TestCase
from django.urls import reverse

from news.models import Comment, News

User = get_user_model()


class TestRoutes(TestCase):

    # ПЕРВЫЙ ПРОБНЫЙ ВАРИАНТ
    # def test_home_page(self):
    #     # Вызываем метод get для клиента (self.client)
    #     # и загружаем главную страницу.
    #     response = self.client.get('/')
    #     # Проверяем, что код ответа равен 200.
    #     self.assertEqual(response.status_code, 200)

    # Сейчас неважно, какой именно заголовок и текст будут
    # у новости. При тестировании маршрутов содержимое свойств
    # объекта проверяться не будет; значения этих строк не нужно
    # сохранять в константы: в коде тестов эти строки больше нигде
    # не пригодятся.
    # Хуярим фикстуру: создаём записи в БД
    @classmethod
    def setUpTestData(cls):
        cls.news = News.objects.create(
            title='Заголовок',
            text='Текст',
        )
        # Создаём двух пользователей с разными именами:
        cls.author = User.objects.create(username='Лев Толстой')
        cls.reader = User.objects.create(username='Читатель обыкновенный')
        # От имени одного пользователя создаём комментарий к новости:
        cls.comment = Comment.objects.create(
            news=cls.news,
            author=cls.author,
            text='Текст комментария'
        )

    def test_home_page(self):
        # Вместо прямого указания адреса
        # получаем его при помощи функции reverse().
        url = reverse('news:home')
        response = self.client.get(url)
        # Проверяем, что код ответа равен статусу OK (он же 200).
        self.assertEqual(response.status_code, HTTPStatus.OK)

    # Передать необходимые значения в функцию reverse() можно через
    # позиционные или именованные аргументы:
    #
    # url = reverse('news:detail', args=(self.news.pk,))
    # Или
    # url = reverse('news:detail', kwargs={'pk': self.news.pk})
    #
    # То же самое можно сделать, указывая id объекта, а не pk.
    # При этом нужно помнить, что вообще-то первичный ключ не всегда равен id,
    # и в каких-то проектах он может быть другим.
    #
    # url = reverse('news:detail', args=(self.news.id,))
    # Или
    # url = reverse('news:detail', kwargs={'pk': self.news.id})

    def test_detail_page(self):
        url = reverse('news:detail', args=(self.news.id,))
        response = self.client.get(url)
        self.assertEqual(response.status_code, HTTPStatus.OK)

    # Тесты выше test_home_page() и test_detail_page() работают нормально,
    # но их можно улучшить. В этих тестах повторяется один и тот же код:
    # одинаково вызывается функция reverse(),
    # одинаково отправляется GET-запрос к проверяемой странице,
    # одинаково проверяется статус ответа.
    # Разница между этими тестами — только в адресах страниц.
    # Вспомним о принципе DRY и объединим эти два теста в один:
    # соберём в кортеж аргументы для функции reverse()
    # и применим метод subTest():
    # Сюда же можно добавить ещё 3 пути для проверки
    # из пункта 6 "Плана тестирования".
    # Вот он:
    # 6. Страницы регистрации пользователей,
    # входа в учётную запись и выхода из неё доступны анонимным пользователям.
    # В итоге: один метод покрывает пункты 2 и 6 "Плана тестирования"

    def test_pages_availability(self):
        # Создаём набор тестовых данных - кортеж кортежей.
        # Каждый вложенный кортеж содержит два элемента:
        # (имя пути, позиционные аргументы для функции reverse() )
        urls = (
            # Путь для главной страницы не принимает
            # никаких позиционных аргументов,
            # поэтому вторым параметром ставим None.
            ('news:home', None),
            # Путь для страницы новости
            # принимает в качестве позиционного аргумента
            # id записи; передаём его в кортеже.
            ('news:detail', (self.news.id,)),
            ('users:login', None),
            ('users:logout', None),
            ('users:signup', None),
        )
        # Итерируемся по внешнему кортежу
        # и распаковываем содержимое вложенных кортежей:
        for name, args in urls:
            with self.subTest(name=name):
                # Передаём имя и позиционный аргумент в reverse()
                # и получаем адрес страницы для GET-запроса:
                url = reverse(name, args=args)
                response = self.client.get(url)
                self.assertEqual(response.status_code, HTTPStatus.OK)

    # Пункт 3 + 5: Проверка страниц редактирования и удаления комментария
    # Надо проверить, что:
    # Автор может зайти на страницу редактирования своего комментария.
    # Автор может зайти на страницу удаления своего комментария.
    # Читатель не может зайти на страницу редактирования чужого комментария.
    # Читатель не может зайти на страницу удаления чужого комментария.
    #
    # Это можно сделать так же в виде subTest() на 4 строки,
    # но поступим иначе: через вложенные циклы
    # Соберём исходные данные в кортеж кортежей; вложенные кортежи будут
    # содержать объект пользователя и ответ, который ожидается
    # при обращении пользователя к проверяемым страницам:
    def test_availability_for_comment_edit_and_delete(self):
        users_statuses = (
            # автор комментария должен получить ответ OK,
            (self.author, HTTPStatus.OK),
            # читатель должен получить ответ NOT_FOUND.
            (self.reader, HTTPStatus.NOT_FOUND),
        )
        for user, status in users_statuses:
            # Логиним пользователя в клиенте:
            self.client.force_login(user)
            # Для каждой пары "пользователь - ожидаемый ответ"
            # перебираем имена тестируемых страниц:
            for name in ('news:edit', 'news:delete'):
                with self.subTest(user=user, name=name):
                    url = reverse(name, args=(self.comment.id,))
                    response = self.client.get(url)
                    self.assertEqual(response.status_code, status)

    # Проверка редиректов
    # При попытке зайти на страницу редактирования или удаления чужого
    # комментария анонимный пользователь должен быть переадресован
    # на страницу логина.
    # При редиректе на страницу логина Django передаёт в URL
    # параметр next — адрес страницы, куда пользователь будет перенаправлен
    # после того, как авторизуется.
    # Если на страницу /user-only/, к которой разрешён доступ только
    # авторизованным пользователям, попытается зайти анонимный посетитель,
    # то он будет перенаправлен на страницу логина
    # с параметром next=/user-only/:
    # /auth/login/?next=/user-only/

    # В django.test есть специальный метод assertRedirects,
    # он проверяет предположение о том, что с определённого адреса
    # происходит редирект на другую страницу.
    # Этот метод позволяет протестировать:
    # † статус ответа запрошенной страницы (по умолчанию — 302);
    # † статус ответа страницы, на которую ожидается редирект
    #   (по умолчанию — 200);
    # адрес страницы, куда привела цепочка редиректов.

    # При тестировании редиректа нет смысла проверять каждый из этих
    # пунктов по отдельности;
    # Для двух страниц нужно провести одинаковые тесты;
    # вновь используем subTest():
    def test_redirect_for_anonymous_client(self):
        # Сохраняем адрес страницы логина:
        login_url = reverse('users:login')
        # В цикле перебираем имена страниц, с которых ожидаем редирект:
        for name in ('news:edit', 'news:delete'):
            with self.subTest(name=name):
                # Получаем адрес страницы редактирования или удаления комментария:
                url = reverse(name, args=(self.comment.id,))
                # Получаем ожидаемый адрес страницы логина,
                # на который будет перенаправлен пользователь.
                # Учитываем, что в адресе будет параметр next, в котором передаётся
                # адрес страницы, с которой пользователь был переадресован.
                redirect_url = f'{login_url}?next={url}'
                response = self.client.get(url)
                # Проверяем, что редирект приведёт именно на указанную ссылку.
                self.assertRedirects(response, redirect_url)
